package View;

import Business.BasketController;
import Business.CartController;
import Business.ProductController;
import Core.Helper;
import Entity.Basket;
import Entity.Cart;
import Entity.Customer;
import Entity.Product;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.MaskFormatter;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.text.ParseException;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.Locale;

public class CartUI extends JFrame {
    private JPanel MainContainer;
    private JLabel lbl_cart_title;
    private JLabel lbl_cart_customer_name;
    private JTextField fld_cart_date;
    private JTextArea txtArea_cart;
    private JButton lbl_cart_save;
    private JLabel lbl_cart_note;
    private JLabel lbl_cart_date;
    private Customer customer;
    private final BasketController basketController = new BasketController();
    private final ProductController productController = new ProductController();
    private final CartController cartController;
    private final Basket basket;
    public CartUI(Customer customer, Basket basket) throws ParseException {
        this.customer = customer;
        this.cartController = new CartController();
        this.basket = basket;


        $$$setupUI$$$();
        setContentPane(MainContainer);
        setTitle("Create Order");
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setBounds(100, 100, 1000, 400);
        setLocationRelativeTo(null);
        setResizable(false);
        setVisible(true);

        lbl_cart_customer_name.setText("Customer: " + customer.getName());

        ArrayList<Product> products = basketController.findBasket(basket.get_id());

        //DEBUG:check products
        //System.out.println("products " + products);


        lbl_cart_save.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                // Check if the date field is empty
                if (Helper.isTextFieldEmpty(fld_cart_date)) {
                    Helper.showMessage("Please enter a date");
                } else {
                    Cart cart = new Cart();
                    for (Product product : products) {
                        // Skip products that are out of stock
                        if (product.getStock() <= 0)
                            continue;

                        // Set cart details
                        cart.setCustomer(customer);
                        cart.setPrice(product.getPrice());
                        cart.setDate(LocalDate.parse(fld_cart_date.getText(), DateTimeFormatter.ofPattern("dd/MM/yyyy")));
                        cart.setNote(txtArea_cart.getText());

                        // Assign the product list
                        ArrayList<Product> productList = new ArrayList();
                        productList.add(product);  // Add the product to the list
                        cart.setProducts(productList);

                    }
                    // Save the cart using the cart controller
                    cart.setProducts(products);
                    cartController.save(cart);
                    Helper.showMessage("ORDER_CREATED");
                    dispose();
                }
            }
        });
    }


    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() throws ParseException {
        createUIComponents();
        MainContainer = new JPanel();
        MainContainer.setLayout(new GridLayoutManager(8, 1, new Insets(0, 0, 0, 0), -1, -1));
        lbl_cart_title = new JLabel();
        Font lbl_cart_titleFont = this.$$$getFont$$$(null, -1, 22, lbl_cart_title.getFont());
        if (lbl_cart_titleFont != null) lbl_cart_title.setFont(lbl_cart_titleFont);
        lbl_cart_title.setText("Create Order");
        MainContainer.add(lbl_cart_title, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        MainContainer.add(spacer1, new GridConstraints(7, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        lbl_cart_customer_name = new JLabel();
        Font lbl_cart_customer_nameFont = this.$$$getFont$$$(null, -1, 18, lbl_cart_customer_name.getFont());
        if (lbl_cart_customer_nameFont != null) lbl_cart_customer_name.setFont(lbl_cart_customer_nameFont);
        lbl_cart_customer_name.setText("Label");
        MainContainer.add(lbl_cart_customer_name, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        lbl_cart_date = new JLabel();
        lbl_cart_date.setText("Order Date");
        MainContainer.add(lbl_cart_date, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        MainContainer.add(fld_cart_date, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        lbl_cart_note = new JLabel();
        lbl_cart_note.setText("Your Note:");
        MainContainer.add(lbl_cart_note, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        txtArea_cart = new JTextArea();
        MainContainer.add(txtArea_cart, new GridConstraints(5, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        lbl_cart_save = new JButton();
        lbl_cart_save.setText("Create Order");
        MainContainer.add(lbl_cart_save, new GridConstraints(6, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return MainContainer;
    }

    private void createUIComponents() throws ParseException {
        this.fld_cart_date = new JFormattedTextField(new MaskFormatter("##/##/####"));
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("dd/MM/yyyy");
        this.fld_cart_date.setText(formatter.format(LocalDate.now()));
    }
}
